/* 
 This file was generated by Dashcode and is covered by the 
 license.txt included in the project.  You may edit this file, 
 however it is recommended to first turn off the Dashcode 
 code generator otherwise the changes will be lost.
 */

// Note: Properties and methods beginning with underbar ("_") are considered private and subject to change in future Dashcode releases.

DC.Indicator= Class.create(DC.DashcodePart, {

    exposedBindings: ["value","onValue","warningValue","criticalValue"],

    __viewClassName__: "Indicator",
    
    init: function()
    {
        this.base();
        
    },
    
    partSetup: function(spec)
    {
        
        // Give the base class a shot at it
        this.base(spec);
        
        /* Objects */
        this._indicator = this.viewElement();
        
        /* public properties */
        // These are read-only. Use the setter functions to set them.
        this.value = spec.value;
        
        /* Internal objects */
        this._image = null;
            
        this._baseImagesPath = "";
        this.imageOffPath = spec.imageOff == null ? "Images/IndicatorOff.png" : spec.imageOff;
        this.imageOnPath = spec.imageOn == null ? "Images/IndicatorOn.png" : spec.imageOn;
        this.imageWarningPath = spec.imageWarning == null ? "Images/IndicatorWarning.png" : spec.imageWarning;
        this.imageCriticalPath = spec.imageCritical == null ? "Images/IndicatorCritical.png" : spec.imageCritical;
  	
        this.onValue = spec.onValue || 0;
        this.warningValue = spec.warningValue || 0;
        this.criticalValue = spec.criticalValue || 0;
        
        var style = null;
        var element = null;
        
        while (this._indicator.firstChild) {
            this._indicator.removeChild(this._indicator.firstChild);
        }
        
        // Level Indicator Track
        element = document.createElement("img");
        style = element.style;
        style.height = "100%";
        style.width = "100%";
        this._indicator.appendChild(element);
        this._image = element;
        
        this._setBaseImagesPath(spec.baseImagesPath || null);
        
        this.exposedBindings.forEach(function(key){
            this.addObserverForKeyPath(this, "refresh",key);
        },this);

    },
    
    remove: function()
    {
        var parent = this._image.parentNode;
        parent.removeChild(this._image);
    },

    /*
     * refresh() member function
     * Refresh the current level indicator position.
     * Call this to make the level indicator appear after the widget has loaded and 
     * the Indicator object has been instantiated.
     */
    refresh: function()
    {	
        this._computedIndicatorStyle = document.defaultView.getComputedStyle(this._indicator, null);
        this._setValueTo(this.value);
    },

    setValue: function(newValue)
    {
        this.value = newValue;
    },
    
    getValue: function()
    {
        return this.value;
    },
    
    setOnValue: function(newValue)
    {
        this.onValue = newValue;
    },
    
    setWarningValue: function(newValue)
    {
        this.warningValue = newValue;
    },
    
    setCriticalValue: function(newValue)
    {
        this.criticalValue = newValue;
    },
    
    setImageOff: function(newValue)
    {
        this.imageOffPath = newValue;	
        this.refresh();
    },
    
    setImageOn: function(newValue)
    {
        this.imageOnPath = newValue;	
        this.refresh();
    },
    
    setImageWarning: function(newValue)
    {
        this.imageWarningPath = newValue;	
        this.refresh();
    },
    
    setImageCritical: function(newValue)
    {
        this.imageCriticalPath = newValue;	
        this.refresh();
    },
    
    _setValueTo: function(newValue)
    {	
        this.value = newValue;
        
        var imagePath = null;
        
        if (this.value >= this.criticalValue)
            imagePath = this.imageCriticalPath;
        else if (this.value >= this.warningValue)
            imagePath = this.imageWarningPath;
        else if (this.value >= this.onValue)
            imagePath = this.imageOnPath;
        else
            imagePath = this.imageOffPath;
        
        this._image.src = this._baseImagesPath + imagePath;
    },
    
    _setBaseImagesPath: function(basePath)
    {
        if (!basePath) {
            basePath = "";
        } else if (basePath.length > 0 && basePath.charAt(basePath.length-1) != "/") {
            basePath += "/";
        }
        
        this._baseImagesPath = basePath;

        this.refresh();
    },
    
});
